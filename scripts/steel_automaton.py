# -*- coding: utf-8 -*-
"""steel_automaton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BtYxCR815hDAHWOe1FJErPXz-qiPKLmf

steel_automaton.py è uno script python che si propone di automatizzare il processo di dump e gestione del sample, dalla sua esecuzione tramite procdump al dump dei suoi opcodes sottoforma di file csv che va poi usato e tradotto ad immagine.

Questo programma viene invocato dalla macchina host all'interno della macchina guest VM.
"""

# #### PROCDUMP EXECUTION:

# # esegue il comando procdump con percorso berasaglio per il dump e nome del processo da lanciare.

# import subprocess
# import sys

# def run_procdump(directory, process_name):
#     procdump_command = f"C:\\Users\\student\\Desktop\\procdump\\procdump.exe -ma -x {directory} {process_name}"

#     try:
#         result = subprocess.run(procdump_command, shell=True, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#         print("Output:\n", result.stdout)
#     except subprocess.CalledProcessError as e:
#         print("Errore durante l'esecuzione di procdump:")
#         print("Codice di uscita:", e.returncode)
#         print("Errore:", e.stderr)

# if __name__ == "__main__":
#     # Controlla se sono stati forniti due argomenti
#     if len(sys.argv) != 3:
#         print("Usage: python script.py <directory> <process_name>")
#         sys.exit(1)

#     # Prendi la directory e il nome del processo forniti come argomenti dalla linea di comando
#     directory_arg = sys.argv[1]
#     process_name_arg = sys.argv[2]

#     # Esegui procdump con i parametri forniti
#     run_procdump(directory_arg, process_name_arg)

# #### WinDBG ESECUTION AND DUMPING

# # Deve avviare windbg sul file dump prodotto prima ed eseguire i 3 comandi per dumpare la memoria relativa al sample.

# import subprocess

# # Comando Windbg desiderato
# comando_windbg = "your_windbg_command"

# # Costruisci il comando completo per eseguire in Windbg
# comando_completo = f"windbg -c \"{comando_windbg}\""

# # Esegui il comando utilizzando subprocess e cattura l'output
# try:
#     output = subprocess.check_output(comando_completo, shell=True, stderr=subprocess.STDOUT, text=True)
#     # Ora l'output è memorizzato nella variabile 'output'
#     print("Output di Windbg:")
#     print(output)
# except subprocess.CalledProcessError as e:
#     print(f"Errore durante l'esecuzione del comando Windbg: {e.returncode}")
#     # Puoi gestire l'errore a seconda delle tue esigenze
#     print(e.output)

import subprocess

def ripristina_snapshot(nome_macchina_virtuale, nome_snapshot):
    comando = [
        'C:\Program Files\Oracle\VirtualBox\\VBoxManage.exe',
        'snapshot',
        nome_macchina_virtuale,
        'restore',
        nome_snapshot
    ]

    try:
        # Esegui il comando VBoxManage
        subprocess.run(comando, check=True)
        print(f"Snapshot '{nome_snapshot}' ripristinato con successo per '{nome_macchina_virtuale}'.")
    except subprocess.CalledProcessError as e:
        print(f"Errore durante il ripristino dello snapshot: {e}")

# Esempio di utilizzo
nome_macchina_virtuale = "MalwareAnalysis"
nome_snapshot = "PROCDUMP_INIT"
ripristina_snapshot(nome_macchina_virtuale, nome_snapshot)